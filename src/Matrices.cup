import java_cup.runtime.*;
import java.util.*;

parser code {:

    public class Matriz {
        private double[][] matriz;

        private int n;
        private int m;

        public Matriz(double[][] matriz) {
                this.matriz = new double[matriz.length][];
                for (int i = 0; i < matriz.length; i++) {
                    this.matriz[i] = new double[matriz[i].length];
                    System.arraycopy(matriz[i], 0, this.matriz[i], 0, matriz[i].length);
                }

                this.n = matriz.length;
                this.m = matriz[0].length;
            }

        public Matriz(double[][] matriz, int n, int m) {
            this.matriz = new double[matriz.length][];
            for (int i = 0; i < matriz.length; i++) {
                this.matriz[i] = new double[matriz[i].length];
                System.arraycopy(matriz[i], 0, this.matriz[i], 0, matriz[i].length);
            }
            this.n = n;
            this.m = m;
        }

        public double[][] getMatriz() {
            return this.matriz;
        }

        public int getM() {
            return this.m;
        }

        public int getN() {
            return this.n;
        }
    }

:}


terminal ALL, CLL, AP, CP, AC, CC, COMA, PYC
            , ASIG, MAS, MENOS, POR, DIV
            , INVERSA, TRANSPUESTA, ADJUNTA, PRINT
            , IDENT, NUMERO;

nonterminal s, lista_instrucciones, instruccion, valor, a, v;
nonterminal Matriz valor_matricial;

start with s;

s ::= lista_instrucciones;

lista_instrucciones ::= instruccion PYC lista_instrucciones;

instruccion ::= ;

/*
FORMACION DE MATRICES: 
######################


# Partiendo de 
[lA]

# Concatenación de filas
A -> ;lA
A -> 
# Concatenación de elementos
l -> aB
B -> ,aB
B -> 
*/
