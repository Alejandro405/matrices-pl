
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\005\006\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\011\005\000\002\011\005\000\002\006\005" +
    "\000\002\006\007\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\024\005\025\011\001\002\000\010\002" +
    "\073\024\005\025\011\001\002\000\004\006\067\001\002" +
    "\000\004\013\066\001\002\000\004\013\065\001\002\000" +
    "\010\002\uffff\024\uffff\025\uffff\001\002\000\004\014\012" +
    "\001\002\000\020\004\017\006\023\010\021\021\015\022" +
    "\013\023\016\025\014\001\002\000\004\006\062\001\002" +
    "\000\012\007\ufff5\013\ufff5\015\ufff5\017\ufff5\001\002\000" +
    "\004\006\057\001\002\000\004\006\054\001\002\000\006" +
    "\004\034\026\033\001\002\000\010\013\ufffc\015\026\017" +
    "\027\001\002\000\006\004\034\026\033\001\002\000\012" +
    "\007\ufff7\013\ufff7\015\ufff7\017\ufff7\001\002\000\020\004" +
    "\017\006\023\010\021\021\015\022\013\023\016\025\014" +
    "\001\002\000\012\007\ufff6\013\ufff6\015\ufff6\017\ufff6\001" +
    "\002\000\010\007\030\015\026\017\027\001\002\000\020" +
    "\004\017\006\023\010\021\021\015\022\013\023\016\025" +
    "\014\001\002\000\020\004\017\006\023\010\021\021\015" +
    "\022\013\023\016\025\014\001\002\000\012\007\ufff8\013" +
    "\ufff8\015\ufff8\017\ufff8\001\002\000\012\007\ufff9\013\ufff9" +
    "\015\ufff9\017\ufff9\001\002\000\012\007\ufffa\013\ufffa\015" +
    "\ufffa\017\027\001\002\000\012\005\uffea\011\uffea\012\uffea" +
    "\013\uffea\001\002\000\004\026\033\001\002\000\010\011" +
    "\042\012\041\013\043\001\002\000\012\005\uffec\011\uffec" +
    "\012\037\013\uffec\001\002\000\004\026\040\001\002\000" +
    "\012\005\uffeb\011\uffeb\012\uffeb\013\uffeb\001\002\000\004" +
    "\004\045\001\002\000\012\007\ufff1\013\ufff1\015\ufff1\017" +
    "\ufff1\001\002\000\004\026\033\001\002\000\012\005\uffef" +
    "\011\uffef\012\037\013\uffef\001\002\000\004\026\033\001" +
    "\002\000\006\005\047\012\037\001\002\000\012\005\uffee" +
    "\011\uffee\012\uffee\013\uffee\001\002\000\006\005\051\012" +
    "\037\001\002\000\012\005\uffed\011\uffed\012\uffed\013\uffed" +
    "\001\002\000\010\005\053\012\041\013\043\001\002\000" +
    "\012\007\ufff0\013\ufff0\015\ufff0\017\ufff0\001\002\000\020" +
    "\004\017\006\023\010\021\021\015\022\013\023\016\025" +
    "\014\001\002\000\010\007\056\015\026\017\027\001\002" +
    "\000\012\007\ufff2\013\ufff2\015\ufff2\017\ufff2\001\002\000" +
    "\020\004\017\006\023\010\021\021\015\022\013\023\016" +
    "\025\014\001\002\000\010\007\061\015\026\017\027\001" +
    "\002\000\012\007\ufff4\013\ufff4\015\ufff4\017\ufff4\001\002" +
    "\000\020\004\017\006\023\010\021\021\015\022\013\023" +
    "\016\025\014\001\002\000\010\007\064\015\026\017\027" +
    "\001\002\000\012\007\ufff3\013\ufff3\015\ufff3\017\ufff3\001" +
    "\002\000\010\002\ufffd\024\ufffd\025\ufffd\001\002\000\010" +
    "\002\ufffe\024\ufffe\025\ufffe\001\002\000\020\004\017\006" +
    "\023\010\021\021\015\022\013\023\016\025\014\001\002" +
    "\000\010\007\071\015\026\017\027\001\002\000\004\013" +
    "\ufffb\001\002\000\010\002\000\024\000\025\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\012\002\003\003\007\004\005\005\006\001" +
    "\001\000\010\003\071\004\005\005\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\017\011\021\012\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\051\007\035\001\001" +
    "\000\002\001\001\000\006\006\034\007\035\001\001\000" +
    "\002\001\001\000\010\010\024\011\021\012\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\031\011" +
    "\021\012\023\001\001\000\010\010\030\011\021\012\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\043" +
    "\001\001\000\002\001\001\000\004\007\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\054\011\021\012\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\057\011\021\012\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\062\011\021" +
    "\012\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\067\011\021" +
    "\012\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public void error(int id) {
        switch (id) {
            case 1 :
                System.out.println(Matrices.ERROR_FILAS);
                break;

            case 2 :
                System.out.println(Matrices.ERROR_INVERSA);
                break;

            case 3 :
                System.out.println(Matrices.ERROR_ADJUNTA);
                break;

            case 4 :
                System.out.println(Matrices.ERROR_PROD);
                break;

            case 5 :
                System.out.println(Matrices.ERROR_SUMA);
                break;

            case 6 :
                System.out.println(TablaSimbolos.ERROR_NOEXISTE);
                break;

            default:
                System.out.println("Error desconocido");
                break;
        }
    }

    public class Matriz {

        private double[][] matriz;

        private int n;
        private int m;

        public Matriz(ArrayList<ArrayList<Double>> filas) {
            /*if (filas.size() != 0) {
                int m = filas.get(0).size();
                double[][] matriz = new double[filas.size()][m];

                for (int i = 0; i < filas.size(); i++) {
                    if (filas.get(i).size() != m) {
                        error(1);
                        return;
                    }
                    for (int j = 0; j < m; j++) {
                        matriz[i][j] = filas.get(i).get(j);
                    }
                }

                this.matriz = matriz;
                this.n = matriz.length;
                this.m = matriz[0].length;
            } else {
               System.err.println("No se permiten matrices vacÃ­as");
            }*/

            double[][] res = null;

            try {
                res = Matrices.toArray(filas);
                this.matriz = res;
                this.n = res.length;
                this.m = res[0].length;

            } catch (Exception e) {
                error(1);
            }
        }

        public Matriz(double[][] matriz) {
            this.matriz = new double[matriz.length][];
            for (int i = 0; i < matriz.length; i++) {
                this.matriz[i] = new double[matriz[i].length];
                System.arraycopy(matriz[i], 0, this.matriz[i], 0, matriz[i].length);
            }

            this.n = matriz.length;
            this.m = matriz[0].length;
        }

        public Matriz(double[][] matriz, int n, int m) {
            this.matriz = new double[matriz.length][];
            for (int i = 0; i < matriz.length; i++) {
                this.matriz[i] = new double[matriz[i].length];
                System.arraycopy(matriz[i], 0, this.matriz[i], 0, matriz[i].length);
            }
            this.n = n;
            this.m = m;
        }

        public Matriz sum(Matriz other) {
            Matriz res = null;

            if (matriz.length != other.matriz.length || matriz[0].length != other.matriz[0].length) {
                error(5);
            } else {
                //res = calcSum(other, matriz);
                res = new Matriz(Matrices.suma(other.matriz, this.matriz));
            }

            return res;
        }

        private Matriz calcSum(Matriz other, double[][] matriz) {
            double[][] result = new double[matriz.length][matriz[0].length];
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < matriz[0].length; j++) {
                    result[i][j] = matriz[i][j] + other.matriz[i][j];
                }
            }

            return new Matriz(result);
        }

        public Matriz multiply(Matriz other) {
            Matriz res = null;

            if (matriz[0].length != other.matriz.length) {
                error(4);
            } else {
                //res = new Matriz(calcMultiply(other, matriz));
                res = new Matriz(Matrices.producto(this.matriz, other.matriz));
            }


            return res;
        }

        private double[][] calcMultiply(Matriz other, double[][] matriz) {
            double[][] result = new double[matriz.length][other.matriz[0].length];
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < other.matriz[0].length; j++) {
                    for (int k = 0; k < matriz[0].length; k++) {
                        result[i][j] += matriz[i][k] * other.matriz[k][j];
                    }
                }
            }
            return result;
        }

        public Matriz transpose() {
            return calcTranspose(matriz);
        }

        private  Matriz calcTranspose(double[][] matriz) {
            double[][] result = new double[matriz[0].length][matriz.length];
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < matriz[0].length; j++) {
                    result[j][i] = matriz[i][j];
                }
            }

            return new Matriz(result);
        }

        public Matriz inverse() {
            Matriz res = null;

            if (matriz.length != matriz[0].length) {
                error(2);
            } else {
                // res = calcInverse(matriz);
                res = new Matriz(Matrices.inversa(this.matriz));
            }

            return res;
        }

        private  Matriz calcInverse(double[][] matriz) {

            int n = matriz.length;
            double[][] a = new double[n][2 * n];
            double[][] b = new double[n][n];

            // Copy the matrix to a and b
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    a[i][j] = matriz[i][j];
                    b[i][i] = 1;
                }
            }

            // Perform Gaussian elimination
            for (int i = 0; i < n; i++) {
                for (int k = i + 1; k < n; k++) {
                    double factor = a[k][i] / a[i][i];
                    for (int j = 0; j < 2 * n; j++) {
                        a[k][j] -= factor * a[i][j];
                    }
                }
            }

            // Perform back substitution
            for (int i = n - 1; i >= 0; i--) {
                for (int j = i + 1; j < n; j++) {
                    b[i][i] -= a[i][j] * b[j][i];
                }
                b[i][i] /= a[i][i];
            }

            return new Matriz(b);
        }

        public double[][] getMatriz() {
            return this.matriz;
        }

        public int getM() {
            return this.m;
        }

        public int getN() {
            return this.n;
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lista_instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_instrucciones ::= lista_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= sentencia PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= IDENT ASIG valor_matricial 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Matriz m = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   if ( m != null) { TablaSimbolos.insertar(id, m.getMatriz()); } else { System.err.println("AÃ±adiendo a la variable" + id + " un valor nulo"); TablaSimbolos.insertar(id, null); }   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= PRINT AP valor_matricial CP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Matriz m = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   if ( m != null && m.getMatriz() != null) { Matrices.print(m.getMatriz()); }   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valor_matricial ::= valor_matricial MAS valor_matricial 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Matriz b = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =  (a != null ? a.sum(b) : null);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor_matricial ::= valor_matricial POR valor_matricial 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Matriz b = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =  (a != null ? a.multiply(b) : null);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor_matricial ::= AP valor_matricial CP 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT =  a;                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor_matricial ::= def_matriz 
            {
              Matriz RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Matriz m = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =  m;                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor_matricial ::= func_matricial 
            {
              Matriz RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Matriz m = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =  m;                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor_matricial ::= IDENT 
            {
              Matriz RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT =  new Matriz(TablaSimbolos.buscar(id));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_matricial",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_matricial ::= INVERSA AP valor_matricial CP 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT =  ( a != null ? a.inverse() : null );           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_matricial",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_matricial ::= TRANSPUESTA AP valor_matricial CP 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT =  ( a != null ? a.transpose() : null );         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_matricial",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_matricial ::= ADJUNTA AP valor_matricial CP 
            {
              Matriz RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Matriz a = (Matriz)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT =  a;                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_matricial",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_matriz ::= AC lista_fila CC 
            {
              Matriz RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> l = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Matriz(l);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_matriz ::= ALL lista_fila CLL 
            {
              Matriz RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> l = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Matriz(l);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_fila ::= lista_fila PYC fila 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ArrayList<Double>> l = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int filaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int filaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> fila = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  l.add(fila); RESULT = l;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_fila ::= lista_fila COMA ALL fila CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ArrayList<Double>> l = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  l.add(f); RESULT = l;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_fila ::= ALL fila CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ArrayList(List.of(f));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_fila ::= fila 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int filaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int filaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> fila = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList(List.of(fila));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fila ::= fila COMA NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Double> l = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  l.add(n); RESULT = l;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fila ::= NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList(List.of(n));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
